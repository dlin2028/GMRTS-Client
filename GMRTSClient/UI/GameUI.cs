/* Generated by MyraPad at 3/16/2021 11:29:51 PM */
using GMRTSClasses.CTSTransferData;
using GMRTSClient.UI.ClientAction;
using Microsoft.Xna.Framework;
using System;

namespace GMRTSClient.UI
{
	public class UIStatus
	{
		public ActionType CurrentAction { get; set; }
		public BuildingType CurrentBuilding { get; set; }
		public bool MouseHovering { get; set; }
        public UIStatus(ActionType currentAction, BuildingType currentBuilding, bool mouseHovering)
        {
			CurrentAction = currentAction;
			CurrentBuilding = currentBuilding;
			MouseHovering = mouseHovering;
        }

		public void Update(ActionType currentAction, BuildingType currentBuilding, bool mouseHovering)
		{
			CurrentAction = currentAction;
			CurrentBuilding = currentBuilding;
			MouseHovering = mouseHovering;
		}
	}


	public partial class GameUI
	{
		public ActionType CurrentAction { get; private set; }
		public BuildingType CurrentBuilding { get; private set; }

		private enum CurrentMenu
		{
			none,
			buildBuilding,
			buildUnit
		}

		private CurrentMenu currentMenu;

		public GameUI()
		{
			BuildUI();

			MoveButton.Click += (s, a) => { CurrentAction = MoveButton.IsPressed ? ActionType.Move : ActionType.None; };
			MoveButton.Click += resetActionButtons;

			AssistButton.Click += (s, a) => { CurrentAction = AssistButton.IsPressed ? ActionType.Assist : ActionType.None; };
			AssistButton.Click += resetActionButtons;

			AttackButton.Click += (s, a) => { CurrentAction = AttackButton.IsPressed ? ActionType.Attack : ActionType.None; };
			AttackButton.Click += resetActionButtons;

			PatrolButton.Click += (s, a) => { CurrentAction = PatrolButton.IsPressed ? ActionType.Patrol : ActionType.None; };
			PatrolButton.Click += resetActionButtons;
			
			//buildButton.Selected += resetBuildButtons;
			//buildButton.Selected += (s, a) => { currentMenu = CurrentMenu.buildBuilding; };
			//buildButton.Selected += closeOtherMenus;

			//buildUnitsButton.Selected += resetBuildButtons;
			//buildUnitsButton.Selected += (s, a) => { currentMenu = CurrentMenu.buildUnit; };
			//buildUnitsButton.Selected += closeOtherMenus;

			//factoryButton.Selected += resetBuildButtons;
			//factoryButton.Selected += (s, a) => { factoryButton.Color = Color.DarkBlue; CurrentBuilding = BuildingType.Factory; CurrentAction = ActionType.Build; };

			//mineButton.Selected += resetBuildButtons;
			//mineButton.Selected += (s, a) => { mineButton.Color = Color.DarkBlue; CurrentBuilding = BuildingType.Mine; CurrentAction = ActionType.Build; };

			//supermarketButton.Selected += resetBuildButtons;
			//supermarketButton.Selected += (s, a) => { supermarketButton.Color = Color.DarkBlue; CurrentBuilding = BuildingType.Supermarket; CurrentAction = ActionType.Build; };
		}
		//private void closeOtherMenus(object sender, EventArgs e)
  //      {
  //          switch (currentMenu)
  //          {
  //              case CurrentMenu.buildBuilding:
		//			unitbuildMenu.Visible = false;
		//			buildMenu.Visible = !buildMenu.Visible;
		//			break;
  //              case CurrentMenu.buildUnit:
		//			buildMenu.Visible = false;
		//			unitbuildMenu.Visible = !unitbuildMenu.Visible;
		//			break;
  //              default:
  //                  break;
  //          }
  //      }

		//private void resetBuildUnitButtons(object sender, EventArgs e)
		//{
		//	tankButton.Color = Color.White;
		//	builderButton.Color = Color.White;
		//}

		//private void resetBuildButtons(object sender, EventArgs e)
        //{
		//	factoryButton.Color = Color.White;
		//	mineButton.Color = Color.White;
		//	supermarketButton.Color = Color.White;
		//}

		private void resetActionButtons(object sender, EventArgs a)
        {
			MoveButton.IsPressed = false;
			AssistButton.IsPressed = false;
			AttackButton.IsPressed = false;
			PatrolButton.IsPressed = false;

			switch (CurrentAction)
			{
				case ActionType.Move:
					MoveButton.IsPressed = !MoveButton.IsPressed;
					break;
				case ActionType.Attack:
					AttackButton.IsPressed = !AttackButton.IsPressed;
					break;
				case ActionType.Assist:
					AssistButton.IsPressed = !AssistButton.IsPressed;
					break;
				case ActionType.Patrol:
					PatrolButton.IsPressed = !PatrolButton.IsPressed;
					break;
				default:
					break;
			}
		}
	}
}